<div class="container">
  <h1>Create Character</h1>
  <form action="/build-character" method="POST">
    <div class="mb-3">
      <label for="name" class="form-label">Name</label>
      <input type="text" class="form-control" id="name" name="name" required />
    </div>
    <div>
      <h2>Choose Class</h2>
      <select name="class" id="classSelect">
        <!-- Options will be dynamically populated by JavaScript -->
      </select>
    </div>
    <div id="attributes">
      <!-- Attribute sliders will be dynamically generated here -->
    </div>
    <p>Total points: <span id="totalPoints">0</span>/36</p>

    <button type="submit" class="btn btn-primary">Create Character</button>
  </form>

  <div class="chart-container">
    <canvas id="attributeChart"></canvas>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js@3.5.0/dist/chart.min.js"></script>
<script>
  let attributeChartInstance = null;

  // Fetch character data from the API endpoint
  fetch("/characters")
    .then((response) => response.json())
    .then((data) => {
      // Get the select element
      const classSelect = document.getElementById("classSelect");

      // Create options for each character class
      data.forEach((character) => {
        const option = document.createElement("option");
        option.value = character.class;
        option.textContent = character.class;
        classSelect.appendChild(option);
      });

      // Handle class selection change event
      classSelect.addEventListener("change", (event) => {
        const selectedClass = event.target.value;

        // Find the selected class data
        const selectedClassData = data.find(
          (character) => character.class === selectedClass
        );

        // Get the attribute names
        const attributeNames = Object.keys(selectedClassData.attributes);

        // Get the attributes div
        const attributesDiv = document.getElementById("attributes");

        // Clear the attributes div
        attributesDiv.innerHTML = "";

        // Create sliders for each attribute
        attributeNames.forEach((attribute) => {
          const wrapper = document.createElement("div");
          wrapper.className = "attribute-wrapper";

          const label = document.createElement("label");
          label.textContent = attribute;

          const slider = document.createElement("input");
          slider.type = "range";
          slider.min = 0;
          slider.max = 36;
          slider.value = 0;
          slider.className = "attribute-slider";

          wrapper.appendChild(label);
          wrapper.appendChild(slider);
          attributesDiv.appendChild(wrapper);
        });

        // Add event listeners to sliders
        const sliders = document.querySelectorAll(".attribute-slider");
        sliders.forEach((slider) => {
          slider.addEventListener("input", updateTotalPoints);
        });

        // Get the attribute values
        const attributes = Object.values(selectedClassData.attributes);

        // Destroy the previous chart instance if exists
        if (attributeChartInstance) {
          attributeChartInstance.destroy();
        }

        // Render the bar graph
        renderBarGraph(attributes, attributeNames);
      });
    })
    .catch((error) => console.error("Error fetching character data:", error));

  // Function to render the bar graph
  function renderBarGraph(attributes, attributeNames) {
    const attributeChart = document
      .getElementById("attributeChart")
      .getContext("2d");

    attributeChartInstance = new Chart(attributeChart, {
      type: "bar",
      data: {
        labels: attributeNames,
        datasets: [
          {
            label: "Attributes",
            data: attributes,
            backgroundColor: "rgba(75, 192, 192, 0.8)",
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
          },
        },
      },
    });
  }

  function updateTotalPoints() {
    const sliders = document.querySelectorAll(".attribute-slider");
    let totalPoints = 0;
    sliders.forEach((slider) => {
      totalPoints += parseInt(slider.value);
    });

    // Don't allow more than 25 points total
    if (totalPoints > 36) {
      alert("You can't allocate more than 36 points!");
      // Reset the slider that caused the overflow to its previous value
      event.target.value = event.target.value - (totalPoints - 36);
      totalPoints = 36;
    }

    // Update total points display
    document.getElementById("totalPoints").textContent = totalPoints;
  }
</script>
